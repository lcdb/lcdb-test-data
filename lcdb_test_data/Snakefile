import gzip
import os
from Bio import SeqIO
from Bio.Seq import Seq
from textwrap import dedent

# required to avoid near-simultaneous timestamps that confuse snakemake
shell.prefix('sleep 2;')

n = range(1, 5)
rule all:
    input:
        expand(
            'samples/sample{n}/sample{n}.{paired}.bam',
            n=n, paired=['paired', 'single']
        ) + [
            'annotation/dm6.small.refflat',
            'seq/dm6.small.transcriptome.fa',
            'LIMIT.bed',
        ]
        + expand('samples/sample{n}/sample{n}_R{N}.fastq.gz', n=n, N=[1, 2])
        #+ expand('samples/sample{n}/sample{n}.small_R{N}.fastq.gz', n=n, N=[1,2])


# ----------------------------------------------------------------------------
# Create a BED file that will be used to subset GTF and FASTA files
rule limits:
    output: 'LIMIT.bed'
    shell:
        'echo "2L	0	1000000	2L" > {output}; '
        'echo "2R	0	1000000	2R" >> {output}'


# ----------------------------------------------------------------------------
# Download FlyBase GTF, so
rule prep_gtf:
    input: rules.limits.output
    output: 'annotation/dm6.small.gtf'
    shell:
        'wget --no-clobber -q '
        '-O- '
        'ftp://ftp.flybase.net/genomes/Drosophila_melanogaster/dmel_r6.11_FB2016_03/gtf/dmel-all-r6.11.gtf.gz > tmp.gtf.gz '
        '&& bedtools sort -i tmp.gtf.gz | grep exon > tmp.gtf '
        '&& bedtools intersect -a tmp.gtf -b {input} > {output} '
        '&& rm tmp.gtf tmp.gtf.gz'

rule prep_transcriptome:
    input: rules.prep_gtf.output
    output: 'seq/dm6.small.transcriptome.fa'
    run:
        from Bio import SeqIO
        import gffutils

        shell('wget --no-clobber -q '
              '-O- '
              'ftp://ftp.flybase.net/genomes/Drosophila_melanogaster/dmel_r6.11_FB2016_03/fasta/dmel-all-transcript-r6.11.fasta.gz '
              '| gzip -d -c > tmp.fa ')
        features = gffutils.iterators.DataIterator(str(input[0]))
        keep = set([i.attributes['transcript_id'][0] for i in features])
        parser = SeqIO.parse('tmp.fa', 'fasta')
        recs = []
        for rec in parser:
            if rec.name in keep:
                recs.append(rec)
        with open(output[0], 'w') as fout:
            SeqIO.write(recs, fout, 'fasta')
        shell('rm tmp.fa')

rule gtftorefflat:
    input: rules.prep_gtf.output
    output: 'annotation/dm6.small.refflat'
    shell:
        'gtfToGenePred {input} {output}.tmp '
        '&& paste <(cut -f1 {output}.tmp) {output}.tmp > {output} '
        '&& rm {output}.tmp'


rule prep_fasta:
    input: rules.limits.output
    output: 'seq/dm6.small.fa'
    shell:
        'wget --no-clobber -q '
        '-O- ftp://ftp.flybase.net/genomes/Drosophila_melanogaster/dmel_r6.11_FB2016_03/fasta/dmel-all-chromosome-r6.11.fasta.gz '
        '| gunzip -c > tmp.fa '
        '&& bedtools getfasta -fi tmp.fa -bed {input} -fo {output} -name '
        '&& rm tmp.fa tmp.fa.fai'


rule download_fastqs:
    output:
        fastq_R1='samples/{sample}/{sample}.full_R1.fastq.gz',
        fastq_R2='samples/{sample}/{sample}.full_R2.fastq.gz'
    run:
        accession = {
            'sample1': 'SRR948304',
            'sample2': 'SRR948305',
            'sample3': 'SRR948306',
            'sample4': 'SRR948307',
        }[wildcards.sample]
        shell('fastq-dump {accession} --split-files')
        shell('gzip -c {accession}_1.fastq > {output.fastq_R1}')
        shell('gzip -c {accession}_2.fastq > {output.fastq_R2}')



# ----------------------------------------------------------------------------
# HISAT2 index
rule hisat_index:
    input: rules.prep_fasta.output
    output: expand('seq/dm6.small.{n}.ht2', n=range(1,8))
    params: index='seq/dm6.small'
    log: 'seq/dm6.small.ht2.log'
    shell:
        'hisat2-build {input} {params.index} &> {log}'

# ----------------------------------------------------------------------------
# bowtie2 index
rule bowtie2_index:
    input: rules.prep_fasta.output
    output: expand('seq/dm6.small.{n}.bt2', n=range(1,3))
    params: index='seq/dm6.small'
    log: 'seq/dm6.small.bt2.log'
    shell:
        'bowtie2-build {input} {params.index} &> {log}'

# ----------------------------------------------------------------------------
# HISAT2 align.
#
# Note we're creating both SE and PE bams in serial rather than parallel
# (simplifies the snakefile)
rule hisat_align:
    input:
        index=expand('seq/2L.{n}.ht2', n=range(1,8)),
        fastq_R1=rules.flux.output.fastq_R1,
        fastq_R2=rules.flux.output.fastq_R2,
    output:
        paired=temporary('samples/{sample}/{sample}.paired.sam'),
        single=temporary('samples/{sample}/{sample}.single.sam'),
    params: index='seq/2L'
    run:
        shell(
            'hisat2 '
            '-x {params.index} '
            '-1 {input.fastq_R1} '
            '-2 {input.fastq_R2} '
            '-S {output.paired}'
        )
        shell(
            'hisat2 '
            '-x {params.index} '
            '-U {input.fastq_R1} '
            '-S {output.single}'
        )

# ------------------------------------------------------------------------------
# HISAT2 outputs SAM but most tools use BAM
rule bam:
    input:
        paired=rules.hisat_align.output.paired,
        single=rules.hisat_align.output.single
    output:
        paired='samples/{sample}/{sample}.paired.bam',
        single='samples/{sample}/{sample}.single.bam'
    run:
        shell('samtools view -Sb {input.paired} > {output.paired}')
        shell('samtools view -Sb {input.single} > {output.single}')


# vim: ft=python
